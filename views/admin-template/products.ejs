<div class="container-fluid">

  <div class="d-flex justify-content-between my-3">
    <div class="left">
      <h2>Products</h2>
    </div>
    <div class="right">
      <a href="/" class="btn btn-inverse-warning">Draft's</a>
      <a href="/products/add_product" class="btn btn-inverse-info">+ Add new product</a>
    </div>
  </div>

  <!-- DataTales Example -->
  <div class="card">
    <div class="card-header bg-white p-3">
      <h5 class="m-0">All Products</h5>
    </div>
    <div class="card-body p-2">
      <div class="table-responsive bg-white p-2 rounded">
        <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
          <thead>
            <tr>
              <th>#</th>
              <th>IMG</th>
              <th>Title</th>
              <th>Price</th>
              <th>Quantitly</th>
              <!-- <th>Discount</th> -->
              <th>Category</th>
              <th>Created</th>
              <th style="cursor: pointer; text-align: center;">-</th>
            </tr>
          </thead>
          <tbody id="tableToEdit">
            <!-- table content -->
          </tbody>
        </table>
        <div class="d-flex justify-content-end mt-3">
          <nav aria-label="Page navigation example">
            <ul class="pagination">
              <li class="page-item" id="btnA"><a class="page-link" data-current="1">Previous</a></li>
              <li class="page-item active" id="btnB"><a class="page-link" data-current="1">1</a></li>
              <li class="page-item" id="btnC"><a class="page-link" data-current="1">2</a></li>
              <li class="page-item" id="btnD"><a class="page-link" data-current="1">3</a></li>
              <li class="page-item " id="btnE"><a class="page-link" data-current="1">Next</a></li>
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>

</div>

<script>
  const dataToReadable = <%-locals?.util?.dataToReadable%>;

  const updateTable = async (page) => {
    const tabelData = document.getElementById('tableToEdit');

    const tdForLoader = document.createElement('tr');

    for (let i = 0; i < 8; i++) {
      const tr = document.createElement('td');
      const div = document.createElement('div');
      div.setAttribute('class', 'spinner-border text-secondary');
      div.setAttribute('role', 'status');
      tr.append(div);
      tdForLoader.append(tr);
    };

    tabelData.append(tdForLoader);

    async function delayMe() { // TODO remove this delay me 
      return new Promise(r => {
        setTimeout(() => {
          r(true);
        }, 500);
      })
    };

    const data = await delayMe();

    try {
      const pages = await getDataFromServer(page);
      const pagesData = pages?.pages?.data ? pages?.pages?.data : [];

      tabelData.innerHTML = '';

      pagesData.forEach((items, i) => {
        const tr = document.createElement('tr');

        const index = document.createElement('td');
        index.innerText = (i + 1);

        const img_cont = document.createElement('td');
        const img = document.createElement('img');
        img.setAttribute('src', `/product_images/${items.PID}1.jpg`);
        img.setAttribute('class', 'img-fluid rounded');
        img_cont.append(img);

        const title = document.createElement('td');
        title.innerText = items?.title?.slice(0, 55) + '...';

        const price = document.createElement('td');
        price.setAttribute("style", "white-space: nowrap;");
        price.innerText = 'â‚¹ ' + items?.price;

        const stock = document.createElement('td');
        stock.setAttribute("style", "white-space: nowrap;");
        stock.innerText = items?.stock + ' pcs';

        const category = document.createElement('td');
        category.setAttribute('style', "text-transform: capitalize;");
        category.innerText = items?.category;

        const creationTime = document.createElement('td');
        creationTime.setAttribute("style", "white-space: nowrap;");
        creationTime.innerText = dataToReadable(items?.creationTime);

        const more = document.createElement('td');
        more.setAttribute('style', 'cursor: pointer; text-align: center;');
        more.setAttribute('onclick', `window.location.href='/products/edit_product/${items?.PID}'`);
        more.innerHTML = `<b>More</b>`;

        tr.append(index, img_cont, title, price, stock, category, creationTime, more);

        tabelData.append(tr);

      });

      return pages;
    } catch (error) {
      throw 'Error while fetching data stage 2 =>';
    };
  };
  const getDataFromServer = async (page) => {
    try {
      const data = await fetch(`/api/products?pages=${page?page:1}`, {
        method: 'GET'
      });
      return await data.json();
    } catch (error) {
      throw 'Error fetching data form db';
    };
  };

  (async function getProductsToTable() {
    window.InitialProductData = await updateTable(1);

    const btnA = document.getElementById('btnA');
    const btnB = document.getElementById('btnB');
    const btnC = document.getElementById('btnC');
    const btnD = document.getElementById('btnD');
    const btnE = document.getElementById('btnE');

    const pageNo = Number(btnA.getAttribute('data-current')) + 1;
    const maxPgNo = ((parseInt((Number(window?.InitialProductData?.pages?.totalCount) / 10)) * 10) + 10) / Number(window?.InitialProductData?.pages?.length);
    const minPgNo = 1

    if (pageNo <= minPgNo) {
      btnA.classList.add('disabled');
    } else {
      btnA.classList.remove('disabled');
    };

    if (pageNo >= maxPgNo) {
      btnE.classList.add('disabled');
    } else {
      btnE.classList.remove('disabled');
    };


    btnA.onclick = async (e) => {
      if (!btnA.className.includes('disabled')) await updateTable((pageNo - 1));
    };
    btnE.onclick = async (e) => {
      if (!btnE.className.includes('disabled')) await updateTable((pageNo + 1));
    };

    btnB.onclick = async (e) => {

    };


  })();
</script>