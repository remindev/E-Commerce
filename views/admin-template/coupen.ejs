<!-- Custom styles for this page -->
<link href="/vendor/datatables/dataTables.bootstrap4.min.css" rel="stylesheet">

<!-- Begin Page Content -->
<div class="container-fluid">

  <!-- Page Heading -->
  <div class="d-flex justify-content-between align-items-center my-3">
    <div class="d-flex align-items-center">
      <h1 class="h3 d-flex gap-2"><i class="mdi mdi-ticket"></i> Coupens</h1>
    </div>
    <div>
      <a href="/coupen/add_coupen" class="btn btn-info">+ Add new coupen</a>
    </div>
  </div>


  <!-- DataTales Example -->
  <div class="card mb-4">
    <div class="mb-1 small" id="progressDisp"></div>
    <div class="card-header p-3 bg-white">
      <h6 class="m-0 font-weight-bold text-primary">All Coupens</h6>
    </div>
    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
          <thead>
            <tr>
              <th>#</th>
              <th>Code</th>
              <th>Title</th>
              <th>Value</th>
              <th>Expires</th>
              <th>status</th>
              <th>More</th>
            </tr>
          </thead>
          <tbody>
            <% categorys.forEach((category,index,array)=>{ %>
            <tr>
              <td>
                <%=index+1%>
              </td>
              <td>
                <%= locals.util.randomId(8,'A') %>
              </td>
              <td>
                Today special
              </td>
              <td>
                â‚¹ <%= locals.util.randomId(4,'0') %>
              </td>
              <td>
                <%=category.creationTime%>
              </td>
              <td style="text-transform:capitalize;">
                active
              </td>
              <td style="cursor: pointer; text-align: center;">
                <b> More</b>
              </td>
            </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>
<!-- /.container-fluid -->

<script>
  const disp = ({
    message,
    isGood,
    returnVal
  }) => {
    let disp_state = document.getElementById("disp_state");
    disp_state.style.color = isGood ? 'green' : 'red';
    disp_state.style.display = message || returnVal == false ? 'flex' : 'none';
    disp_state.innerText = message ? message : disp_state.innerText;
    return isGood || message == '' ? true : returnVal;
  };

  function addCatogery() {
    const category = document.getElementById("categoryInput");
    const errDisp = category.parentElement.querySelector("span");
    errDisp.innerText = '';

    if (category.value.length > 2) {
      fetch('/category/add_category', {
          headers: {
            'Content-Type': 'application/json'
          },
          method: "POST",
          body: JSON.stringify({
            category: category.value ? category.value : null
          })
        })
        .then(res => res.json())
        .then(res => {
          disp({
            message: res.message,
            isGood: res.status == 'error' ? false : true
          });
          if (res.status == 'good') {
            if (res?.action) {
              window.location.href = res.action;
            } else {
              window.location.reload();
            };
          };
        })
        .catch(error => {
          disp({
            message: "Error connecting to server"
          });
        });
    } else {
      errDisp.innerText = 'Enter a valid category';
    };
  };

  function categoryName(ID, td) {
    const categoryInput = td.querySelector('input');
    categoryInput.removeAttribute('disabled');
    categoryInput.focus();
  };

  const inputCollection = document.querySelectorAll('input.input_editable');

  inputCollection.forEach(element => {
    element.addEventListener('keyup', e => {
      if (e.keyCode == 13) {
        const value = e.target.value;
        const ID = e.target.getAttribute('data-id');
        const input = e.target;
        saveCurrentValue(ID, value, input);
      };
    });
    element.addEventListener('focusout', e => {
      const value = e.target.value;
      const ID = e.target.getAttribute('data-id');
      const input = e.target;
      saveCurrentValue(ID, value, input);
    });
  });

  const xhtml = new XMLHttpRequest();

  function saveCurrentValue(ID, value, input, isDelete) {

    const progress_bar = document.getElementById('progressBar');
    const progress_disp = document.getElementById('progressDisp');

    progress_bar.classList.add('bg-primary')

    progress_bar.parentElement.style.filter = 'opacity(100)';
    progress_bar.style.width = '0';
    progress_bar.style.transition = 'all 0s ease 0s';
    progress_bar.parentElement.style.backgroundColor = '#eaecf4';

    input.style.borderColor = 'black';


    if (value?.length > 2) {

      xhtml.abort();
      xhtml.open('PUT', '/category/edit_category');

      const formData = new FormData();

      formData.append('ID', ID ? ID : null);
      formData.append('category', value ? value : null);

      xhtml.upload.addEventListener('progress', ({
        loaded,
        total
      }) => {
        const status = Math.floor((loaded / total) * 100);
        progress_bar.parentElement.style.display = '';
        progress_bar.style.width = `${status}%`;
      });

      xhtml.onreadystatechange = async (e) => {

        if (xhtml.readyState === 4) {
          if (xhtml.status == 200) {
            const res = await JSON.parse(xhtml.response);

            if (res.status == 'error') {
              input.style.borderColor = 'red';
              progress_bar.classList.remove('bg-primary');
              progress_bar.classList.add('bg-danger');
            } else {
              input.style.borderColor = '';
              progress_bar.classList.remove('bg-danger');
              progress_bar.classList.add('bg-primary');
              input.setAttribute('disabled', '');
            };

          } else {
            // connection error server
          };
        };
      };

      xhtml.send(formData);

    } else {
      input.style.borderColor = 'red';
    };
  };

  function deleteCategory(ID) {

    if (prompt('Delete Category ? Type yes to confirm', 'yes')?.trim() == 'yes') {

      fetch('/category/delete_category', {
          method: "DELETE",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            ID: ID
          })
        })
        .then(res => res.json())
        .then(res => {
          if (res.status == 'error') {
            console.log(res.message);
          } else {
            window.location.reload();
          };
        })
        .catch(error => {
          console.log(error);
        });
    };
  };
</script>