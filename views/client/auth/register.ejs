<div id="preloder" style="display: none;">
  <div class="bar" style="margin-top:50px;"></div>
  <p style="margin-bottom:50px;">Connecting to server</p>
</div>

<div class="card">
  <div class="title">
    <h1>Get your account</h1>
  </div>
  <div class="status_disp" id="status_disp" style="display: none;"> </div>
  <div class="input-group">
    <input type="text" placeholder="Email" id="emailInput">
    <input type="text" placeholder="Mobile number" id="phoneInput">
    <button onclick="validate()">Continue</button>
  </div>
  <div class="or">
    OR
  </div>
  <div class="social">
    <button id="googleLoginBtn" class="google"><img src="/icn/google.png" alt="">&nbsp; Signup with Google</button>
  </div>
  <p>Already have a account ? <b class="Tosignup" onclick="nextPage()">LOGIN</b></p>
</div>

<script>
  function nextPage() {
    const loader = document.getElementById('preloder');
    loader.style.display = 'flex';
    window.location.href = '/user_signin';
  };
  async function validate() {
    const disp_state = document.getElementById('status_disp');
    const emailInput = document.getElementById("emailInput");
    const phoneInput = document.getElementById("phoneInput");
    const loader = document.getElementById('preloder');
    disp_state.classList.remove('err');
    disp_state.innerText = '';
    disp_state.style.display = 'none';

    try {
      // primary layer of validation's
      if (!emailInput.value) throw 'Email field cannot be empty';
      if (emailInput.value.match(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/)) {} else throw 'Enter a valid email';
      if (!phoneInput.value) throw 'Phone number field cannot be empty';
      if (phoneInput.value.match(/^\+?[1-9][0-9]{7,14}$/)) {} else throw 'Enter a valid phone number';

      // show loader
      loader.style.display = 'flex';

      // sending request to server
      const responseFromServer = await fetch('/user_registration', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: emailInput.value?.trim(),
          phone: phoneInput.value?.trim()
        })
      });

      // response form server 
      const res = await responseFromServer.json();

      // loader hidden
      loader.style.display = 'none';

      // handling error messsages form server
      if (res.status == 'error') throw res.message;

      // sendign user to curresponding pages
      if (res.status == 'good') window.location.href = res.action;

    } catch (error) {
      loader.style.display = 'none';
      disp_state.classList.add('err');
      disp_state.innerText = error;
      disp_state.style.display = 'block';
      return 0;
    };
  };
</script>